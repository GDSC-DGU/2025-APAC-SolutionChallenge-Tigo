const functions = require("firebase-functions");
const { GoogleAuth } = require("google-auth-library");
const fetch = require("node-fetch");
const admin = require("firebase-admin");
const { FieldValue } = require("firebase-admin/firestore");
const project = functions.config().tigo.project_id;
const location = "us-central1";
const model = "gemini-2.0-flash-001";
const axios = require("axios");
const GOOGLE_API_KEY =  functions.config().tigo.google_map_key;

const url = `https://${location}-aiplatform.googleapis.com/v1/projects/${project}/locations/${location}/publishers/google/models/${model}:generateContent`;

if (!admin.apps.length) {
  admin.initializeApp();
}
const db = admin.firestore();

function stripCodeBlock(text) {
  if (!text) return "";

  // 1. ÏΩîÎìúÎ∏îÎ°ù Ï†úÍ±∞ (```json, ``` Îì±)
  let cleaned = text
    .replace(/^\s*```(?:json)?\s*/i, "")
    .replace(/\s*```\s*$/i, "")
    .trim();

  // 2. Î∞∞Ïó¥Îßå Ï∂îÏ∂ú (Í∞ÄÏû• Î∞îÍπ•Ï™Ω [])
  const firstBracket = cleaned.indexOf("[");
  const lastBracket = cleaned.lastIndexOf("]");
  if (firstBracket !== -1 && lastBracket !== -1 && lastBracket > firstBracket) {
    cleaned = cleaned.substring(firstBracket, lastBracket + 1);
  } else {
    // ÌòπÏãú Î∞∞Ïó¥Ïù¥ ÏïÑÎãàÎùº Í∞ùÏ≤¥Î°ú Ïò¨ Í≤ΩÏö∞, Í∞ÄÏû• Î∞îÍπ•Ï™Ω {} Ï∂îÏ∂ú
    const firstCurly = cleaned.indexOf("{");
    const lastCurly = cleaned.lastIndexOf("}");
    if (firstCurly !== -1 && lastCurly !== -1 && lastCurly > firstCurly) {
      cleaned = cleaned.substring(firstCurly, lastCurly + 1);
    }
  }

  // 3. ÏïûÎí§Ïóê ÎÇ®ÏùÄ ÏâºÌëú, ÏÑ∏ÎØ∏ÏΩúÎ°†, Í∞úÌñâ, Í≥µÎ∞± Îì± Ï†úÍ±∞
  cleaned = cleaned.replace(/^[,;\n\r\s]+|[,;\n\r\s]+$/g, "");

  // 4. ÌòπÏãú Ï§ëÍ∞ÑÏóê Îòê ÏΩîÎìúÎ∏îÎ°ùÏù¥ ÏûàÏúºÎ©¥ Ìïú Î≤à Îçî Ï†úÍ±∞
  cleaned = cleaned
    .replace(/^\s*```(?:json)?\s*/i, "")
    .replace(/\s*```\s*$/i, "")
    .trim();

  return cleaned;
}

function jsObjectToJson(str) {
  // 1. key: value ‚Üí "key": value
  str = str.replace(/([{,]\s*)([a-zA-Z0-9_]+)\s*:/g, '$1"$2":');
  // 2. 'value' ‚Üí "value"
  str = str.replace(/'([^']*)'/g, '"$1"');
  return str;
}

exports.tripPlan = functions
  .region(location)
  .runWith({
    memory: "512MB",
    timeoutSeconds: 60,
  })

  .https.onRequest(async (req, res) => {
    console.log("üî• tripPlan Ìï®ÏàòÍ∞Ä Ìò∏Ï∂úÎêòÏóàÏäµÎãàÎã§!");

    if (req.method !== "POST") {
      res.status(405).send("Method Not Allowed");
      return;
    }

    // ÌÖåÏä§Ìä∏ ÌôòÍ≤ΩÏóêÏÑúÎäî userIdÎ•º Î¨¥Ï°∞Í±¥ 'test1'Î°ú Í∞ïÏ†ú
    let { userId } = req.body;
    userId = "test1";
    // FirestoreÏóêÏÑú ÎåÄÌôî Î∂àÎü¨Ïò§Í∏∞
    const messagesRef = db
      .collection("dialogs")
      .doc(userId)
      .collection("messages");
    const snapshot = await messagesRef.orderBy("timestamp").get();
    const dialog = snapshot.docs.map((doc) => doc.data());
    console.log("Î∞õÏùÄ ÎåÄÌôî:", dialog);

    if (!dialog || !Array.isArray(dialog)) {
      res.status(400).json({ error: "dialog ÌååÎùºÎØ∏ÌÑ∞ ÎàÑÎùΩ" });
      return;
    }

    // 2. role-content ÌÖçÏä§Ìä∏Î°ú Î≥ÄÌôò
    const dialogText = dialog
      .map(
        (msg) =>
          `${msg.role === "assistant" ? "model" : "user"}: ${msg.content}`
      )
      .join("\n");

    // 3. ÌîÑÎ°¨ÌîÑÌä∏ÏôÄ Í≤∞Ìï©
    const systemPrompt = `
ÏïÑÎûòÎäî Ïó¨Ìñâ Ï±óÎ¥áÍ≥º ÏÇ¨Ïö©ÏûêÏùò Ïã§Ï†ú ÎåÄÌôî ÎÇ¥Ïó≠ÏûÖÎãàÎã§.

${dialogText}

ÏúÑ ÎåÄÌôî ÌûàÏä§ÌÜ†Î¶¨Î•º Ï∞∏Í≥†Ìï¥ÏÑú, 
Ïó¨Ìñâ ÏùºÏ†ïÌëúÎ•º **ÌïúÍµ≠Ïñ¥**Î°ú, Í∑∏Î¶¨Í≥† ÏïÑÎûòÏôÄ Í∞ôÏùÄ **JSON Î∞∞Ïó¥** ÌòïÌÉúÎ°ú ÎßåÎì§Ïñ¥Ï§ò.

Í∞Å ÏùºÏ†ï(spot)ÏùÄ Î∞òÎìúÏãú ÏïÑÎûòÏùò Î™®Îì† ÌïÑÎìúÎ•º Ìè¨Ìï®Ìï¥Ïïº Ìï¥.

- "date": "2024-05-20" (Î∞©Î¨∏ ÎÇ†Ïßú, ISO 8601 ÌòïÏãù)
- "time": "09:00" (Î∞©Î¨∏ ÏãúÍ∞Ñ, 24ÏãúÍ∞ÑÏ†ú)
- "place": "Í≤ΩÎ≥µÍ∂Å" (Ïû•ÏÜåÎ™Ö)
- "category": "Í∂ÅÍ∂ê" (Ïû•ÏÜå Ïπ¥ÌÖåÍ≥†Î¶¨, Ïòà: Í∂ÅÍ∂ê, Î∞ïÎ¨ºÍ¥Ä, Ïπ¥Ìéò Îì±)
- "openTime": "09:00" (Ïò§Ìîà ÏãúÍ∞Ñ, 24ÏãúÍ∞ÑÏ†ú)
- "closeTime": "18:00" (ÎßàÍ∞ê ÏãúÍ∞Ñ, 24ÏãúÍ∞ÑÏ†ú)
- "info": "Í≤ΩÎ≥µÍ∂ÅÏùÄ Ï°∞ÏÑ†ÏãúÎåÄÏùò ÎåÄÌëú Í∂ÅÍ∂êÎ°ú..." (Ïû•ÏÜåÏóê ÎåÄÌïú Í∞ÑÎã®Ìïú ÏÑ§Î™Ö)
- "fee": 3000 (ÏûÖÏû•Î£å, Ïà´Ïûê)
- "latitude": 37.579617 (ÏúÑÎèÑ, ÏÜåÏàòÏ†ê)
- "longitude": 126.977041 (Í≤ΩÎèÑ, ÏÜåÏàòÏ†ê)
- "thumbnail": "https://..." (**Ïã§Ï†ú Ï°¥Ïû¨ÌïòÎäî Ïù¥ÎØ∏ÏßÄÏùò URLÎßå ÏÇ¨Ïö©, Î∞òÎìúÏãú Íµ¨Í∏Ä Ïù¥ÎØ∏ÏßÄ, ÏúÑÌÇ§ÎØ∏ÎîîÏñ¥, Í≥µÏãù ÌôàÌéòÏù¥ÏßÄ Îì± Ïã†Î¢∞Ìï† Ïàò ÏûàÎäî Ïù¥ÎØ∏ÏßÄ ÎßÅÌÅ¨Îßå ÏÇ¨Ïö©**)

**thumbnail ÌïÑÎìúÎäî Î∞òÎìúÏãú Ïã§Ï†úÎ°ú Ï†ëÍ∑º Í∞ÄÎä•Ìïú Ïù¥ÎØ∏ÏßÄÏùò URLÏù¥Ïñ¥Ïïº ÌïòÎ©∞, ÏòàÏãúÎÇò ÏûÑÏùòÏùò ÌÖçÏä§Ìä∏, Îπà Í∞í, ÏïÑÏù¥ÏΩò, Î°úÍ≥†, ÏÑ§Î™Ö Îì±ÏùÄ Ï†àÎåÄ ÎÑ£ÏßÄ Îßà.**
**Î∞òÎìúÏãú Íµ¨Í∏Ä Ïù¥ÎØ∏ÏßÄ, ÏúÑÌÇ§ÎØ∏ÎîîÏñ¥, Í≥µÏãù ÌôàÌéòÏù¥ÏßÄ Îì±ÏóêÏÑú Ïã§Ï†ú Ïù¥ÎØ∏ÏßÄÎ•º Ï∞æÏïÑÏÑú Í∑∏ URLÎßå ÎÑ£Ïñ¥.**

**Î∞òÎìúÏãú ÏïÑÎûòÏôÄ Í∞ôÏùÄ JSON Î∞∞Ïó¥ ÌòïÌÉúÎ°úÎßå Ï∂úÎ†•Ìï¥Ï§ò.**
ÏòàÏãú:

[
  {
    "date": "2024-05-20",
    "time": "09:00",
    "place": "Í≤ΩÎ≥µÍ∂Å",
    "category": "Í∂ÅÍ∂ê",
    "openTime": "09:00",
    "closeTime": "18:00",
    "info": "Í≤ΩÎ≥µÍ∂ÅÏùÄ Ï°∞ÏÑ†ÏãúÎåÄÏùò ÎåÄÌëú Í∂ÅÍ∂êÎ°ú...",
    "fee": 3000,
    "latitude": 37.579617,
    "longitude": 126.977041,
    "thumbnail": "https://upload.wikimedia.org/wikipedia/commons/6/6d/Korea-Seoul-Gyeongbokgung-01.jpg"
  }
]

**ÏÑ§Î™ÖÏù¥ÎÇò Î∂ÄÍ∞Ä ÌÖçÏä§Ìä∏ ÏóÜÏù¥, Î∞òÎìúÏãú JSONÎßå Ï∂úÎ†•Ìï¥Ï§ò.**
**Ïó¨Ìñâ ÏùºÏ†ïÏùÄ Î∞òÎìúÏãú ÏµúÏÜå 3Ïùº(3Í∞ú ÎÇ†Ïßú) Ïù¥ÏÉÅÏúºÎ°ú Í∞Å ÎÇ†Ïóê 3Í∞úÏù¥ÏÉÅÏùò ÏùºÏ†ïÏúºÎ°ú Î∂ÑÎ∞∞Ìï¥ÏÑú ÏûëÏÑ±Ìï¥Ï§ò.**
**Í∞Å ÎÇ†Ïßú(date)Îäî ÏÑúÎ°ú Îã¨ÎùºÏïº ÌïòÎ©∞, ÌïòÎ£®Ïóê Ïó¨Îü¨ spotÏù¥ Î∞∞Ï†ïÎê† Ïàò ÏûàÏñ¥.**
`;

    // 4. Gemini API Ìò∏Ï∂úÏö© messages
    const messagesForGemini = [
      { role: "user", parts: [{ text: systemPrompt }] },
    ];

    try {
      // Google Ïù∏Ï¶ù ÌÜ†ÌÅ∞ Î∞úÍ∏â
      const auth = new GoogleAuth({
        scopes: "https://www.googleapis.com/auth/cloud-platform",
      });
      const client = await auth.getClient();
      const accessToken = await client.getAccessToken();

      // Gemini generateContent API Ìò∏Ï∂ú
      const response = await fetch(url, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${accessToken.token || accessToken}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          contents: messagesForGemini,
          generationConfig: {
            temperature: 0.7,
            maxOutputTokens: 2048,
            topK: 40,
            topP: 0.95,
          },
        }),
      });

      const data = await response.json();
      // Ïã§Ï†ú ÌÖçÏä§Ìä∏ Ï∂îÏ∂ú
      const text =
        data.candidates?.[0]?.content?.parts?.[0]?.text ||
        data.candidates?.[0]?.content?.text ||
        JSON.stringify(data);

      // GeminiÍ∞Ä JSONÎßå Ï∂úÎ†•ÌïòÎèÑÎ°ù ÌîÑÎ°¨ÌîÑÌä∏Î•º Ï§¨ÏúºÎãà, ÏΩîÎìúÎ∏îÎ°ù Ï†úÍ±∞ ÌõÑ ÌååÏã± ÏãúÎèÑ
      const cleanText = stripCodeBlock(text);
      let schedules;
      try {
        let tryText = jsObjectToJson(cleanText);
        if (!tryText.trim().startsWith("[")) {
          tryText = `[${tryText}]`;
        }
        // 1Ï∞® ÏãúÎèÑ: Ï†ÑÏ≤¥ ÌååÏã±
        try {
          schedules = JSON.parse(tryText);
        } catch (e) {
          // 2Ï∞® ÏãúÎèÑ: Í∞úÎ≥Ñ Í∞ùÏ≤¥Îßå Ï∂îÏ∂úÌï¥ÏÑú ÌååÏã±
          schedules = [];
          // Í∞ùÏ≤¥ Îã®ÏúÑÎ°ú Ï∂îÏ∂ú (Ï§ëÍ¥ÑÌò∏Î°ú Í∞êÏãº Î∂ÄÎ∂Ñ)
          const objectRegex = /{[\s\S]*?}/g;
          const matches = tryText.match(objectRegex);
          if (matches) {
            for (const objStr of matches) {
              try {
                schedules.push(JSON.parse(jsObjectToJson(objStr)));
              } catch (e) {
                // ÌååÏã± Ïã§Ìå®Ìïú Í∞ùÏ≤¥Îäî Î¨¥Ïãú
              }
            }
          }
          // ÌòπÏãú Î∞∞Ïó¥Ïù∏Îç∞ ÎÇ¥Î∂ÄÍ∞Ä Í∞ùÏ≤¥Í∞Ä ÏïÑÎãê ÏàòÎèÑ ÏûàÏúºÎãà, ÎßàÏßÄÎßâ Î∞©Ïñ¥
          if (!Array.isArray(schedules)) schedules = [];
        }
        // schedulesÍ∞Ä ÎπÑÏñ¥ÏûàÏúºÎ©¥ ÏµúÏÜå Îπà Î∞∞Ïó¥ Î∞òÌôò
        if (!Array.isArray(schedules)) schedules = [];
      } catch (e) {
        // Ïù¥ Î∏îÎ°ùÍπåÏßÄ Ïò§Î©¥ Ï†ïÎßê Ïã¨Í∞ÅÌïú Î¨∏Ï†ú, Í∑∏ÎûòÎèÑ Îπà Î∞∞Ïó¥ Î∞òÌôò
        schedules = [];
      }

      // Íµ¨Í∏ÄÎßµ ÏÉÅÏÑ∏Ï†ïÎ≥¥ enrich
      console.log("before enrich schedules:", schedules);
      const enriched = await enrichAllSchedules(schedules);
      console.log("after enrich schedules:", enriched);
      res.json({ result: JSON.stringify(enriched) });
    } catch (e) {
      console.error("ÏóêÎü¨ Î∞úÏÉù:", e);
      res.status(500).json({ error: e.toString() });
    }
  });

exports.saveDialog = functions
  .region(location)
  .https.onRequest(async (req, res) => {
    if (req.method !== "POST") {
      res.status(405).send("Method Not Allowed");
      return;
    }
    let { userId, dialog } = req.body;
    userId = "test1";
    if (!dialog) {
      res.status(400).json({ error: "userId, dialog ÌååÎùºÎØ∏ÌÑ∞ ÎàÑÎùΩ" });
      return;
    }
    // dialog: [{role, content}, ...]
    const batch = db.batch();
    const messagesRef = db
      .collection("dialogs")
      .doc(userId)
      .collection("messages");
    dialog.forEach((msg) => {
      const docRef = messagesRef.doc(); // ÏûêÎèô ID
      batch.set(docRef, {
        ...msg,
        timestamp: FieldValue.serverTimestamp(),
      });
    });
    await batch.commit();
    res.json({ success: true });
  });

async function searchPlace(placeName) {
  const url = `https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=${encodeURIComponent(
    placeName
  )}&inputtype=textquery&fields=place_id&key=${GOOGLE_API_KEY}`;
  const res = await axios.get(url);
  return res.data.candidates?.[0]?.place_id;
}
async function getPlaceDetails(placeId) {
  const url = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=name,geometry,opening_hours,photos,formatted_address,international_phone_number,website&key=${GOOGLE_API_KEY}`;
  const res = await axios.get(url);
  return res.data.result;
}

function getPhotoUrl(photoReference) {
  return `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photo_reference=${photoReference}&key=${GOOGLE_API_KEY}`;
}

async function enrichSchedule(schedule) {
  const placeId = await searchPlace(schedule.place);
  if (!placeId) return { ...schedule, error: "Ïû•ÏÜå Í≤ÄÏÉâ Ïã§Ìå®" };
  const details = await getPlaceDetails(placeId);

  return {
    ...schedule,
    address: details.formatted_address,
    latitude: details.geometry.location.lat,
    longitude: details.geometry.location.lng,
    openTime: details.opening_hours?.periods?.[0]?.open?.time || null,
    closeTime: details.opening_hours?.periods?.[0]?.close?.time || null,
    phone: details.international_phone_number,
    website: details.website,
    thumbnail: details.photos?.[0]
      ? getPhotoUrl(details.photos[0].photo_reference)
      : null,
  };
}

async function enrichAllSchedules(schedules) {
  return Promise.all(schedules.map(enrichSchedule));
}
